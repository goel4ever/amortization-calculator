{"version":3,"sources":["Components/Layouts/Header.js","Components/Layouts/InputForm.js","Components/Layouts/AmortizationSchedule.js","Components/Layouts/Footer.js","App.js","serviceWorker.js","index.js"],"names":["props","Navbar","bg","variant","Brand","href","InputForm","state","principal","rate","duration","startDate","initializeDate","extraPayment","changeHandler","event","name","target","value","setState","submitForm","onSubmit","date","Date","month","getMonth","year","getFullYear","toLocaleDateString","action","className","InputGroup","Prepend","Text","id","FormControl","placeholder","this","onChange","aria-label","aria-describedby","Append","Button","color","onClick","React","Component","style","textAlign","ButtonGroup","Table","striped","bordered","hover","size","columns","map","column","key","accessor","Header","data","row","paymentNumber","paymentRounded","principalPaymentRounded","interestPaymentRounded","principalBalanceRounded","accInterestRounded","App","monthlyPayment","amortizationSchedule","calculate","monthlyRate","durationMonths","Math","pow","i","prevPrincipal","principalBalance","interestPayment","principalPayment","max","accInterest","push","payment","floor","showPagination","defaultPageSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.612295f2.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nexport default props => (\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Amortization Calculator</Navbar.Brand>\n  </Navbar>\n);\n","import React from 'react';\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\nimport './InputForm.css';\n\nclass InputForm extends React.Component {\n  state = {\n    principal: 400000,\n    rate: 3.85,\n    duration: 30,\n    startDate: this.initializeDate(),\n    extraPayment: 0,\n  };\n  initializeDate() {\n    const date = new Date();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return new Date(year, month + 1, 1).toLocaleDateString();\n  }\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    if (value) {\n      this.setState({\n        [name]: value,\n      });\n    }\n  };\n  submitForm = () => {\n    this.props.onSubmit(this.state);\n  };\n  render() {\n    return (\n      <form action=\"#\" className=\"input-form\">\n        <label name=\"principal\">Principal</label>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            name=\"principal\"\n            placeholder=\"Principal Amount\"\n            value={this.state.principal}\n            onChange={this.changeHandler}\n            aria-label=\"Username\"\n            aria-describedby=\"basic-addon1\"\n          />\n        </InputGroup>\n        <label name=\"apr\">Interest Rate</label>\n        <InputGroup>\n          <FormControl\n            name=\"rate\"\n            placeholder=\"Annual Interest Rate\"\n            value={this.state.rate}\n            onChange={this.changeHandler}\n            aria-label=\"Interest Rate\"\n            aria-describedby=\"basic-addon1\"\n          />\n          <InputGroup.Append>\n            <InputGroup.Text id=\"basic-addon1\">%</InputGroup.Text>\n          </InputGroup.Append>\n        </InputGroup>\n        <label name=\"duration\">Duration</label>\n        <InputGroup>\n          <FormControl\n            name=\"duration\"\n            placeholder=\"Duration in years\"\n            value={this.state.duration}\n            onChange={this.changeHandler}\n            aria-label=\"Duration\"\n            aria-describedby=\"basic-addon1\"\n          />\n          <InputGroup.Append>\n            <InputGroup.Text id=\"basic-addon1\">years</InputGroup.Text>\n          </InputGroup.Append>\n        </InputGroup>\n        <label name=\"start-on\">Start Date</label>\n        <InputGroup>\n          <FormControl\n            name=\"startDate\"\n            placeholder=\"Start Date...\"\n            value={this.state.startDate}\n            onChange={this.changeHandler}\n            aria-label=\"Start date\"\n            aria-describedby=\"basic-addon1\"\n          />\n        </InputGroup>\n        <label name=\"extra-payment\">Extra $/month</label>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            placeholder=\"Extra payment per month\"\n            name=\"extraPayment\"\n            value={this.state.extraPayment}\n            onChange={this.changeHandler}\n            aria-label=\"Extra payment\"\n            aria-describedby=\"basic-addon1\"\n          />\n        </InputGroup>\n        <Button\n          variant=\"primary\"\n          color=\"primary\"\n          className=\"full-width\"\n          onClick={this.submitForm}\n        >\n          Calculate\n        </Button>\n      </form>\n    );\n  }\n}\n\nexport default InputForm;\n","import React from 'react';\nimport { Button, ButtonGroup, Table } from 'react-bootstrap';\n\nimport './AmortizationSchedule.css';\n\nexport default props => (\n  <div style={{ textAlign: 'center' }}>\n    <ButtonGroup aria-label=\"Basic example\">\n      <Button variant=\"secondary\">Monthly</Button>\n      <Button variant=\"secondary\">Yearly</Button>\n      <Button variant=\"secondary\">Custom</Button>\n    </ButtonGroup>\n\n    <Table striped bordered hover size=\"sm\" variant=\"dark\">\n      <thead>\n        <tr>\n          {props.columns.map(column => (\n            <th key={column.accessor}>{column.Header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map(row => (\n          <tr key={row.paymentNumber}>\n            <td>{row.paymentNumber}</td>\n            <td>{row.paymentRounded}</td>\n            <td>{row.principalPaymentRounded}</td>\n            <td>{row.interestPaymentRounded}</td>\n            <td>{row.principalBalanceRounded}</td>\n            <td>{row.accInterestRounded}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  </div>\n);\n","import React from 'react';\nimport './Footer.css';\n\nexport default props => (\n  <div className=\"footer\">\n    <h3>My awesome footer</h3>\n  </div>\n);\n","import React from 'react';\nimport './App.css';\n\nimport Header from './Components/Layouts/Header';\nimport InputForm from './Components/Layouts/InputForm';\nimport AmortizationSchedule from './Components/Layouts/AmortizationSchedule';\nimport Footer from './Components/Layouts/Footer';\n\nclass App extends React.Component {\n  state = {\n    monthlyPayment: 0,\n    columns: [\n      {\n        Header: '#',\n        accessor: 'paymentNumber',\n      },\n      {\n        Header: 'Payment',\n        accessor: 'paymentRounded',\n      },\n      {\n        Header: 'Principal',\n        accessor: 'principalPaymentRounded',\n      },\n      {\n        Header: 'Interest',\n        accessor: 'interestPaymentRounded',\n      },\n      {\n        Header: 'Balance',\n        accessor: 'principalBalanceRounded',\n      },\n      {\n        Header: 'Accumulated Interest',\n        accessor: 'accInterestRounded',\n      },\n    ],\n    amortizationSchedule: [],\n  };\n  calculate = ({ principal, rate, duration, startDate, extraPayment }) => {\n    const monthlyRate = rate / (100 * 12);\n    // const principal = 330000;\n    const durationMonths = duration * 12;\n\n    // const paymentAmountPerPeriod =\n    //   initialPrincipal *\n    //   ((interestRatePerPeriod *\n    //     Math.pow(interestRatePerPeriod + 1, totalNumberOfPayments)) /\n    //     (Math.pow(interestRatePerPeriod + 1, totalNumberOfPayments) - 1));\n\n    const monthlyPayment =\n      principal *\n      (monthlyRate +\n        monthlyRate / (Math.pow(monthlyRate + 1, durationMonths) - 1));\n\n    const amortizationSchedule = [];\n    for (let i = 0; i < durationMonths; i++) {\n      const prevPrincipal =\n        i === 0 ? principal : amortizationSchedule[i - 1].principalBalance;\n      const interestPayment = prevPrincipal * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      const principalBalance = Math.max(prevPrincipal - principalPayment, 0);\n      const accInterest =\n        (i === 0 ? 0 : amortizationSchedule[i - 1].accInterest) +\n        interestPayment;\n      amortizationSchedule.push({\n        paymentNumber: i + 1,\n        payment: monthlyPayment,\n        principalBalance: principalBalance,\n        interestPayment: interestPayment,\n        principalPayment: principalPayment,\n        accInterest: accInterest,\n        paymentRounded: Math.floor(monthlyPayment * 100) / 100.0,\n        interestPaymentRounded: Math.floor(interestPayment * 100) / 100.0,\n        principalPaymentRounded: Math.floor(principalPayment * 100) / 100.0,\n        principalBalanceRounded: Math.floor(principalBalance * 100) / 100.0,\n        accInterestRounded: Math.floor(accInterest * 100) / 100.0,\n      });\n    }\n    this.setState({\n      monthlyPayment,\n      amortizationSchedule,\n    });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <InputForm onSubmit={this.calculate} />\n\n        <AmortizationSchedule\n          data={this.state.amortizationSchedule}\n          columns={this.state.columns}\n          showPagination={false}\n          defaultPageSize={400}\n        />\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}