{"version":3,"sources":["Components/Layouts/Header.js","Components/Layouts/InputForm.js","Components/Layouts/AmortizationSchedule.js","Components/Layouts/Footer.js","App.js","serviceWorker.js","index.js"],"names":["props","Navbar","bg","variant","Brand","href","InputForm","state","principal","rate","duration","startDate","initializeDate","extraPayment","changeHandler","event","name","target","value","setState","submitForm","onSubmit","date","Date","month","getMonth","year","getFullYear","toLocaleDateString","Form","Accordion","Card","Header","Row","Group","as","controlId","Label","InputGroup","Prepend","Text","id","FormControl","placeholder","this","onChange","aria-label","aria-describedby","Append","Button","color","className","onClick","Toggle","eventKey","Collapse","Body","React","Component","style","textAlign","ButtonGroup","Table","striped","bordered","hover","size","columns","map","column","key","accessor","data","row","paymentNumber","paymentRounded","principalPaymentRounded","interestPaymentRounded","principalBalanceRounded","accInterestRounded","CurrencyFormatter","Intl","NumberFormat","currency","App","monthlyPayment","amortizationSchedule","calculate","monthlyRate","durationMonths","Math","pow","i","prevPrincipal","principalBalance","interestPayment","principalPayment","max","accInterest","push","payment","format","showPagination","defaultPageSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e960e9d.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nexport default props => (\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Amortization Calculator</Navbar.Brand>\n  </Navbar>\n);\n","import React from 'react';\nimport {\n  Button,\n  Form,\n  FormControl,\n  InputGroup,\n  Accordion,\n  Card,\n} from 'react-bootstrap';\nimport './InputForm.css';\n\nclass InputForm extends React.Component {\n  state = {\n    principal: 400000,\n    rate: 3.85,\n    duration: 30,\n    startDate: this.initializeDate(),\n    extraPayment: 0,\n  };\n  initializeDate() {\n    const date = new Date();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return new Date(year, month + 1, 1).toLocaleDateString();\n  }\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    if (value) {\n      this.setState({\n        [name]: value,\n      });\n    }\n  };\n  submitForm = () => {\n    this.props.onSubmit(this.state);\n  };\n  render() {\n    return (\n      <Form>\n        <Accordion>\n          <Card>\n            <Card.Header>\n              <Form.Row>\n                <Form.Group as=\"principal\" controlId=\"formGridSomething\">\n                  <Form.Label>Principal</Form.Label>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      name=\"principal\"\n                      placeholder=\"Principal Amount\"\n                      value={this.state.principal}\n                      onChange={this.changeHandler}\n                      aria-label=\"Username\"\n                      aria-describedby=\"basic-addon1\"\n                    />\n                  </InputGroup>\n                </Form.Group>\n\n                <Form.Group as=\"apr\" controlId=\"formGridSomething\">\n                  <Form.Label>Interest Rate</Form.Label>\n                  <InputGroup>\n                    <FormControl\n                      name=\"rate\"\n                      placeholder=\"Annual Interest Rate\"\n                      value={this.state.rate}\n                      onChange={this.changeHandler}\n                      aria-label=\"Interest Rate\"\n                      aria-describedby=\"basic-addon1\"\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"basic-addon1\">%</InputGroup.Text>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Form.Group>\n\n                <Form.Group as=\"duration\" controlId=\"formGridSomething\">\n                  <Form.Label>Duration</Form.Label>\n                  <InputGroup>\n                    <FormControl\n                      name=\"duration\"\n                      placeholder=\"Duration in years\"\n                      value={this.state.duration}\n                      onChange={this.changeHandler}\n                      aria-label=\"Duration\"\n                      aria-describedby=\"basic-addon1\"\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"basic-addon1\">years</InputGroup.Text>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Form.Group>\n              </Form.Row>\n\n              <Button\n                variant=\"primary\"\n                color=\"primary\"\n                className=\"full-width\"\n                onClick={this.submitForm}\n              >\n                Calculate\n              </Button>\n\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                More options\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                <Form.Row>\n                  <Form.Group as=\"start-on\" controlId=\"formGridSomething\">\n                    <Form.Label>Start Date</Form.Label>\n                    <InputGroup>\n                      <FormControl\n                        name=\"startDate\"\n                        placeholder=\"Start Date...\"\n                        value={this.state.startDate}\n                        onChange={this.changeHandler}\n                        aria-label=\"Start date\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n                  </Form.Group>\n\n                  <Form.Group as=\"extra-payment\" controlId=\"formGridSomething\">\n                    <Form.Label>Extra $/month</Form.Label>\n                    <InputGroup>\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Extra payment per month\"\n                        name=\"extraPayment\"\n                        value={this.state.extraPayment}\n                        onChange={this.changeHandler}\n                        aria-label=\"Extra payment\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </InputGroup>\n                  </Form.Group>\n                </Form.Row>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </Form>\n    );\n  }\n}\n\nexport default InputForm;\n","import React from 'react';\nimport { Button, ButtonGroup, Table } from 'react-bootstrap';\n\nimport './AmortizationSchedule.css';\n\nexport default props => (\n  <div style={{ textAlign: 'center' }}>\n    <ButtonGroup aria-label=\"Basic example\">\n      <Button variant=\"secondary\">Monthly</Button>\n      <Button variant=\"secondary\">Yearly</Button>\n      <Button variant=\"secondary\">Custom</Button>\n    </ButtonGroup>\n\n    <Table striped bordered hover size=\"sm\" variant=\"dark\">\n      <thead>\n        <tr>\n          {props.columns.map(column => (\n            <th key={column.accessor}>{column.Header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map(row => (\n          <tr key={row.paymentNumber}>\n            <td>{row.paymentNumber}</td>\n            <td>{row.paymentRounded}</td>\n            <td>{row.principalPaymentRounded}</td>\n            <td>{row.interestPaymentRounded}</td>\n            <td>{row.principalBalanceRounded}</td>\n            <td>{row.accInterestRounded}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  </div>\n);\n","import React from 'react';\nimport './Footer.css';\n\nexport default props => (\n  <div className=\"footer\">\n    <h3>My awesome footer</h3>\n  </div>\n);\n","import React from 'react';\nimport './App.css';\n\nimport Header from './Components/Layouts/Header';\nimport InputForm from './Components/Layouts/InputForm';\nimport AmortizationSchedule from './Components/Layouts/AmortizationSchedule';\nimport Footer from './Components/Layouts/Footer';\n\nconst CurrencyFormatter = new Intl.NumberFormat('us-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nclass App extends React.Component {\n  state = {\n    monthlyPayment: 0,\n    columns: [\n      {\n        Header: '#',\n        accessor: 'paymentNumber',\n      },\n      {\n        Header: 'Payment',\n        accessor: 'paymentRounded',\n      },\n      {\n        Header: 'Principal',\n        accessor: 'principalPaymentRounded',\n      },\n      {\n        Header: 'Interest',\n        accessor: 'interestPaymentRounded',\n      },\n      {\n        Header: 'Balance',\n        accessor: 'principalBalanceRounded',\n      },\n      {\n        Header: 'Accumulated Interest',\n        accessor: 'accInterestRounded',\n      },\n    ],\n    amortizationSchedule: [],\n  };\n  calculate = ({ principal, rate, duration, startDate, extraPayment }) => {\n    const monthlyRate = rate / (100 * 12);\n    // const principal = 330000;\n    const durationMonths = duration * 12;\n\n    // const paymentAmountPerPeriod =\n    //   initialPrincipal *\n    //   ((interestRatePerPeriod *\n    //     Math.pow(interestRatePerPeriod + 1, totalNumberOfPayments)) /\n    //     (Math.pow(interestRatePerPeriod + 1, totalNumberOfPayments) - 1));\n\n    const monthlyPayment =\n      principal *\n      (monthlyRate +\n        monthlyRate / (Math.pow(monthlyRate + 1, durationMonths) - 1));\n\n    const amortizationSchedule = [];\n    for (let i = 0; i < durationMonths; i++) {\n      const prevPrincipal =\n        i === 0 ? principal : amortizationSchedule[i - 1].principalBalance;\n      const interestPayment = prevPrincipal * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      const principalBalance = Math.max(prevPrincipal - principalPayment, 0);\n      const accInterest =\n        (i === 0 ? 0 : amortizationSchedule[i - 1].accInterest) +\n        interestPayment;\n      amortizationSchedule.push({\n        paymentNumber: i + 1,\n        payment: monthlyPayment,\n        principalBalance: principalBalance,\n        interestPayment: interestPayment,\n        principalPayment: principalPayment,\n        accInterest: accInterest,\n        paymentRounded: CurrencyFormatter.format(monthlyPayment),\n        interestPaymentRounded: CurrencyFormatter.format(interestPayment),\n        principalPaymentRounded: CurrencyFormatter.format(principalPayment),\n        principalBalanceRounded: CurrencyFormatter.format(principalBalance),\n        accInterestRounded: CurrencyFormatter.format(accInterest),\n      });\n    }\n    this.setState({\n      monthlyPayment,\n      amortizationSchedule,\n    });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <InputForm onSubmit={this.calculate} />\n\n        <AmortizationSchedule\n          data={this.state.amortizationSchedule}\n          columns={this.state.columns}\n          showPagination={false}\n          defaultPageSize={400}\n        />\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}