{"version":3,"sources":["logo.svg","Components/Layouts/Header.js","Components/Layouts/InputForm.js","Components/Layouts/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","AppBar","position","Toolbar","Typography","variant","action","type","placeholder","Button","color","App","state","monthlyPayment","columns","Header","accessor","amortizationSchedule","calculate","Math","pow","yearsDuration","i","prevPrincipal","principalBalance","interestPayment","principalPayment","max","accInterest","push","paymentNumber","payment","paymentRounded","floor","interestPaymentRounded","principalPaymentRounded","principalBalanceRounded","accInterestRounded","setState","className","InputForm","onClick","this","data","showPagination","defaultPageSize","Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,uMCO5B,WAAAC,GAAK,OAClB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,8B,QCPS,WAAAL,GAAK,OAClB,6BACE,0CACA,0BAAMM,OAAO,KAAb,eAEE,2BAAOC,KAAK,OAAOC,YAAY,qBAFjC,wBAIE,2BAAOD,KAAK,OAAOC,YAAY,qBAJjC,iBAME,2BAAOD,KAAK,OAAOC,YAAY,sBANjC,0BAQE,2BAAOD,KAAK,OAAOC,YAAY,kBARjC,2BAUE,2BAAOD,KAAK,OAAOC,YAAY,MAC/B,kBAACC,EAAA,EAAD,CAAQJ,QAAQ,YAAYK,MAAM,WAAlC,gBCfS,WAAAV,GAAK,OAClB,6BACE,4CC2GWW,E,2MApGbC,MAAQ,CACNC,eAAgB,EAChBC,QAAS,CACP,CACEC,OAAQ,IACRC,SAAU,iBAEZ,CACED,OAAQ,UACRC,SAAU,kBAEZ,CACED,OAAQ,YACRC,SAAU,2BAEZ,CACED,OAAQ,WACRC,SAAU,0BAEZ,CACED,OAAQ,UACRC,SAAU,2BAEZ,CACED,OAAQ,uBACRC,SAAU,uBAGdC,qBAAsB,I,EAExBC,UAAY,WAiBV,IAhBA,IAUML,EATY,MADE,qBAaDM,KAAKC,IAbJ,UAasB,EAAGC,KAAsB,IAE7DJ,EAAuB,GACpBK,EAAI,EAAGA,EAAID,IAAoBC,IAAK,CAC3C,IAAMC,EACE,IAAND,EAjBc,KAiBQL,EAAqBK,EAAI,GAAGE,iBAC9CC,EAAkBF,GAnBN,WAoBZG,EAAmBb,EAAiBY,EACpCD,EAAmBL,KAAKQ,IAAIJ,EAAgBG,EAAkB,GAC9DE,GACG,IAANN,EAAU,EAAIL,EAAqBK,EAAI,GAAGM,aAC3CH,EACFR,EAAqBY,KAAK,CACxBC,cAAeR,EAAI,EACnBS,QAASlB,EACTW,iBAAkBA,EAClBC,gBAAiBA,EACjBC,iBAAkBA,EAClBE,YAAaA,EACbI,eAAgBb,KAAKc,MAAuB,IAAjBpB,GAAwB,IACnDqB,uBAAwBf,KAAKc,MAAwB,IAAlBR,GAAyB,IAC5DU,wBAAyBhB,KAAKc,MAAyB,IAAnBP,GAA0B,IAC9DU,wBAAyBjB,KAAKc,MAAyB,IAAnBT,GAA0B,IAC9Da,mBAAoBlB,KAAKc,MAAoB,IAAdL,GAAqB,MAGxD,EAAKU,SAAS,CACZzB,iBACAI,0B,wEAIF,OACE,yBAAKsB,UAAU,OACb,kBAACxB,EAAD,MACA,kBAACyB,EAAD,MAEA,4BAAQC,QAASC,KAAKxB,UAAWqB,UAAU,cAA3C,cAIA,6BAASA,UAAU,aACjB,kBAAC,IAAD,CACEI,KAAMD,KAAK9B,MAAMK,qBACjBH,QAAS4B,KAAK9B,MAAME,QACpB8B,gBAAgB,EAChBC,gBAAiB,OAIrB,kBAACC,EAAD,W,GA/FUC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f92d053.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nexport default props => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\">Amortization Calculator</Typography>\n      {/* <Button color=\"inherit\">Login</Button> */}\n    </Toolbar>\n  </AppBar>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default props => (\n  <div>\n    <h1>Input Form</h1>\n    <form action=\"#\">\n      Loan Amount:\n      <input type=\"text\" placeholder=\"Principal Amount\" />\n      Annual Interest Rate:\n      <input type=\"text\" placeholder=\"Rate of interest\" />\n      Loan Duration:\n      <input type=\"text\" placeholder=\"Duration in years\" />\n      First Payment Due Date:\n      <input type=\"text\" placeholder=\"Start Date...\" />\n      Extra payment per month:\n      <input type=\"text\" placeholder=\"0\" />\n      <Button variant=\"contained\" color=\"primary\">\n        Calculate\n      </Button>\n    </form>\n  </div>\n);\n","import React from 'react';\n\nexport default props => (\n  <div>\n    <h1>Contact me</h1>\n  </div>\n);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\nimport Header from './Components/Layouts/Header';\nimport InputForm from './Components/Layouts/InputForm';\nimport Footer from './Components/Layouts/Footer';\n\nclass App extends React.Component {\n  state = {\n    monthlyPayment: 0,\n    columns: [\n      {\n        Header: '#',\n        accessor: 'paymentNumber',\n      },\n      {\n        Header: 'Payment',\n        accessor: 'paymentRounded',\n      },\n      {\n        Header: 'Principal',\n        accessor: 'principalPaymentRounded',\n      },\n      {\n        Header: 'Interest',\n        accessor: 'interestPaymentRounded',\n      },\n      {\n        Header: 'Balance',\n        accessor: 'principalBalanceRounded',\n      },\n      {\n        Header: 'Accumulated Interest',\n        accessor: 'accInterestRounded',\n      },\n    ],\n    amortizationSchedule: [],\n  };\n  calculate = () => {\n    const monthlyRate = 3.25 / (100 * 12);\n    const principal = 330000;\n    const yearsDuration = 30;\n\n    // const paymentAmountPerPeriod =\n    //   initialPrincipal *\n    //   ((interestRatePerPeriod *\n    //     Math.pow(interestRatePerPeriod + 1, totalNumberOfPayments)) /\n    //     (Math.pow(interestRatePerPeriod + 1, totalNumberOfPayments) - 1));\n\n    const monthlyPayment =\n      principal *\n      (monthlyRate +\n        monthlyRate / (Math.pow(monthlyRate + 1, yearsDuration * 12) - 1));\n\n    const amortizationSchedule = [];\n    for (let i = 0; i < yearsDuration * 12; i++) {\n      const prevPrincipal =\n        i === 0 ? principal : amortizationSchedule[i - 1].principalBalance;\n      const interestPayment = prevPrincipal * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      const principalBalance = Math.max(prevPrincipal - principalPayment, 0);\n      const accInterest =\n        (i === 0 ? 0 : amortizationSchedule[i - 1].accInterest) +\n        interestPayment;\n      amortizationSchedule.push({\n        paymentNumber: i + 1,\n        payment: monthlyPayment,\n        principalBalance: principalBalance,\n        interestPayment: interestPayment,\n        principalPayment: principalPayment,\n        accInterest: accInterest,\n        paymentRounded: Math.floor(monthlyPayment * 100) / 100.0,\n        interestPaymentRounded: Math.floor(interestPayment * 100) / 100.0,\n        principalPaymentRounded: Math.floor(principalPayment * 100) / 100.0,\n        principalBalanceRounded: Math.floor(principalBalance * 100) / 100.0,\n        accInterestRounded: Math.floor(accInterest * 100) / 100.0,\n      });\n    }\n    this.setState({\n      monthlyPayment,\n      amortizationSchedule,\n    });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <InputForm />\n\n        <button onClick={this.calculate} className=\"app-button\">\n          Click me!!\n        </button>\n\n        <section className=\"app-table\">\n          <ReactTable\n            data={this.state.amortizationSchedule}\n            columns={this.state.columns}\n            showPagination={false}\n            defaultPageSize={400}\n          />\n        </section>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}